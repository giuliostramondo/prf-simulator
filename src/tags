AGU	prf.c	/^Address2d* AGU(int index_i, int index_j,int p, int/
A_custom	prf.c	/^int A_custom(PolymorphicRegister *pR,int index_i, /
A_standard	prf.c	/^int A_standard(int index_i, int index_j, int p, in/
Address2d	prf.h	/^}Address2d;$/
Mmain	main.c	/^int main(int argc, char** argv){$/
Options	utility.h	/^} Options;$/
PolymorphicRegister	prf.h	/^} PolymorphicRegister;$/
acc_type	prf.h	/^} acc_type;$/
computeConflicts	prf.c	/^int** computeConflicts(PolymorphicRegister *pR, in/
createPolymorphicRegister	prf.c	/^PolymorphicRegister *createPolymorphicRegister(int/
linearRegister	prf.h	/^} linearRegister;$/
m_h	prf.c	/^int m_h(int index_i, int index_j, scheme s, int p,/
m_v	prf.c	/^int m_v(int index_i, int index_j, scheme s, int p,/
parallelReadFromPR	prf.c	/^int** parallelReadFromPR(PolymorphicRegister *pR, /
parallelReadRectangleOnly	prf.c	/^int** parallelReadRectangleOnly(PolymorphicRegiste/
parallelReadRow	prf.c	/^int** parallelReadRow(PolymorphicRegister *pR, int/
parseArguments	utility.c	/^Options parseArguments(int argc, char** argv){$/
printConflicts	utility.c	/^void printConflicts(int **inputMatrix, int dim1, i/
printMatrix	utility.c	/^void printMatrix(int **inputMatrix, int dim1, int /
printMatrixHighlight	utility.c	/^void printMatrixHighlight(int **inputMatrix,int di/
printUsage	utility.c	/^void printUsage(char *programName){$/
readBlock	prf.c	/^int** readBlock(PolymorphicRegister *pR, int index/
readFromPR	prf.c	/^int readFromPR(PolymorphicRegister *pR, int index_/
scheme	prf.h	/^} scheme;$/
writeToPR	prf.c	/^void writeToPR(PolymorphicRegister *pR, int data, /
